Die Rails-Alternative erscheint in Version 1.0

*Merbfresser*

Ruby on Rails ist eine der einflussreichsten OpenSource-Entwicklungen der letzten Jahre - Nicht nur existieren für viele Programmiersprachen inzwischen Rails-Clones, vor allem die Paradigmen von Rails haben ihren Weg in andere Frameworks gefunden, so z.B. Convention over Configuration. Dennoch ist Rails nicht frei von Kritik: Es wird oft für zu langsam, zu komplex und zu unflexibel gehalten. Genau an dieser Stelle setzt der Rails-Konkurrent Merb an.

Wer heute eine Datenbank-Basierte Webanwendung (sagen wir, im Web 2.0-Umfeld) auf der grünen Wiese entwickeln möchte, greift in vielen Fällen zu Ruby on Rails. Das Framework, welches vom Autor David Heinemeier Hansson zum erstem Mal in 2004 veröffentlicht wurde, erfreut sich weiterhin zunehmender Beliebtheit. Es liegt inzwischen in Version 2.2 vor und ist gerade in letzter Zeit auch sehr stark in den Bereichen Performance und Speicherverbrauch optimiert worden - Die Version 2.2 ist zudem die erste Version, die, eine geeignete Umgebung vorausgesetzt (wie z.B. JRuby) multithreaded betrieben werden kann. 

Genau hier setzte Ezra Zygmuntowicz an, als er sich entschied, Merb zu entwickeln. Das Grundproblem: Da Rails-Anwendungen grundsätzlich immer nur einen Request pro Prozess abarbeiten können, werden insbesondere lang laufenende Requests (wie z.B. große Datei-Uploads) schnell zu einem Problem für einen Anwendungsserver, der ja nur eine endliche Zahl an Rails-Requests starten kann. 

Im Oktober 2006 veröffentlichte Zygmuntowicz die erste, sehr minimale Version seiner Alternative, die zunächst nur einen Request-Handler für den Ruby-Webserver Mongrel darstellt, der in der Lage ist, HTML, genau wie Rails, über ERb (Embedded Ruby)-Templates auszuliefern. Er taufte das ganze Merb, was für Mongrel + Erb stehen soll.

Im November 2008 erschien Merb 1.0. Inzwischen ist Merb ein komplettes Framework, dessen Benutzung sich sehr stark an Rails orientiert, aber dennoch an vielen Stelle eigene Wege geht. Dies wird klar, wenn man sich die Grundprinzipien der Merb-Entwickler ansieht:

- Optimiert für hohe Performance. Von Anfang an war es das erklärte Ziel der Entwickler, Merb deutlich performanter zu Werke gehen zu lassen als Rails. Aus diesem Ziel lassen sich viele andere Designentscheidungen ableiten. Bei der Entwicklung von Rails war Performance immer nur Sekundärziel.

- Weniger Magie. Während Rails an vielen Stellen intensiven Gebrauch der Metaprogramming-Fähigkeiten von Ruby macht, wurde bei Merb versucht, weitestgehend darauf zu verzichten. Das Ergebnis ist ein Framework, dessen Quelltext deutlich einfacher lesbar ist. An vielen Stellen dürfte diese Designentscheidung auch zu Performance-Gewinnen beitragen.

- Flexibilität und Modularität. Während Rails einem den "Rails Way" vorgibt und es einem sehr schwer macht, z.B. einen anderen Persistenzmechanismus zu verwenden, ist Merb von vornherein flexibel ausgelegt. Man kann Merb mit unterschiedlichen Persistenz-Frameworks verwenden, man kann unterschiedliche Test-Frameworks einklinken, und sogar die Struktur der Anwendung ist in weiten Teilen anpassbar. Im Extremfall kann eine Merb-Anwendung sogar nur aus einer einzigen Datei bestehen. Erreicht wird diese Flexibilität auch durch eine sehr starke Modularisierung - Das Merb-Framework besteht aus über 20 einzelnen Komponenten, von denen man nur die jenigen verwendet, die man wirklich braucht.

- Erweiterbarkeit. Es soll für die Benutzer von Merb wesentlich einfacher sein, den Quellcode von Merb zu verstehen, zu erweitern und anzupassen. Hier zahlt die bereits genannte "Keine Magie"-Strategie ein, zusätzlich gibt es sehr klare Vorgaben im Merb-Projekt, wie Code zu dokumentieren ist, ausserdem gibt es eine Unterscheidung zwischen "public" und "private" APIs, die schon in der Dokumentation deutlich machen, auf welche Konstrukte man sich langfristig verlassen kann und welche man besser nicht anfasst.

*Modelle und Persistenz*

Die Modellschicht in Merb- sowie in Rails-Anwendungen wird in der Regel über einen Objekt-Relationalen-Mapper abgebildet, der für die Persistierung der Modellobjekte sorgt. Bei Rails ist hier ActiveRecord gesetzt. Merb macht so eine Vorgabe nicht und einen bestehenden ORM an Merb anzubinden ist nicht sehr aufwändig. Fertige Anbindungen existieren bereits für ActiveRecord (was Umsteigern den Weg erleichtern sollte) und für DataMapper, ein recht neues Projekt, welches von den Merb-Entwicklern selbst vorangetrieben wird. 

DataMapper liegen ähnliche Design-Entscheidungen zu Grunde wie auch Merb, so dass insbesondere für Entwickler mit hohen Performance-Anforderungen dieses Projekt sehr interessant sein sollte. Da DataMapper im Gegensatz zu Merb noch kein Stabiles Release hat, wurde auf eine nähere Beschreibung an dieser Stelle verzichtet.

*Controller*

Der erste Unterschied von Merb- zu Rails-Controllern ist, dass die Merb-Action-Methoden ihren Rückgabewert als Response-Body an den Browser senden. Eine Action-Methode in Merb fühlt sich also mehr wie eine echte Methode an. Mit Hilfe des Plugins "merb-action-args", welches Bestandteil der Merb-Distribution ist, kann dieser Eindruck sogar noch gesteigert werden, in dem auch die Request-Parameter per Methoden-Parameter übergeben werden. Der komplette Unterschied ist in Beispiel 1 und 2 zu sehen.

[Beispiel 1: die einfachste Art in Rails , einen text zu rendern]
class HelloWorldController < ApplicationController
  def hello_world
    render :text => 'Hallo Welt, Hallo' + params[:name]
  end
end
[Beispiel 2: Die selbe Action in Merb]
class HelloWorld < Application
  def hello_world(name)
   "Hallo Welt, Hallo #{name}"
  end
end

Eine "render"-Methode gibt es auch in Merb, sie funktioniert auch ganz ähnlich, nach den selben regeln wie in Rails wird ein passendes Template gesucht und gerendert. 

[Beispiel 3: ein expliziter aufruf von render ist nötig um ein template zu rendern]
class HelloWorld < Application
  def index
    render # rendert app/views/hello_world/index.html.erb
  end
end

*Biete: JSON*

Ein beliebtes Feature in Rails ist das ausliefern unterschiedlicher Content-Types je nach Anfrage des Browsers, um z.B. einfache Webservice-APIs bereitzustellen. In Merb ist dieses Feature ebenfalls vorhanden, allerdings anders implementiert: Die Methode "display" versucht, die übergebenen Daten transparent auf die Content-Types zu mappen, wenn kein entsprechendes Template vorhanden ist. Im Beispiel 

Auch bei merb gibt es ein Konstrukt, um eine Action Dinge mit verschiedenen Content-Types rendern zu lassen, z.B. als HTML oder als XML oder als JSON. Die Konstrukte unterscheiden sich jedoch deutlich. In Merb gibt es eine Methode namens "display", die versucht, die übergebenen Daten transparent auf die anzubietenden Content-types zu mappen. Im Beispiel 4 und 5 sind die unterschiedlichen Vorgehensweisen zu sehen. Mit "provides" kann der Controller festlegen, für welche Content-Types er sich zuständig fühlt.

[ Beispiel 4: Ein Rails-Controller mit respond_to-Block]
class StarsController < ApplicationController
  def index
    @stars = @universe.stars.find(:all)
    rensponds_to do |format|
      format.xml { @stars.to_xml }
      format.json { @starts.to_json }
      format.html
    end
  end
end
[ Beispiel 5: Ein Merb-Controller mit provides und display]
class Stars < Application
  provides :xml, :json
  def index
    @stars = @universe.stars.find(:all)
    display @stars
  end
end

Auch die display-Methode ruft die "to_xml" und "to_json"-Methoden auf, die Schreibweise ist jedoch erkennbar kompakter. 

Die entsprechnenden Transformations-Methoden (to_xml / to_json) werden übrigens für die übliche Content-Types (xml, json, yaml, etc.) von dem ORMs oder von zusätzlichen Bibliotheken transparent zur Verfügung gestellt.

Da es Situationen gibt, in denen ein einfaches Aufrufen der Transformations-Methoden nicht ausreichen wird, kann auch eine Merb-Action abhängig vom Content-Type verzweigen, Merb bedient sich dort aber der klassischen Case-Anweisung (siehe Beispiel 6)

[Beispiel 6 - Merbs variante von responds_to]

class Stars < Application
  def index
    case content_type 
    when :xml
      # mehr krams hier
      display @stars
    when :yaml 
      display @stars
    else
      # und noch was
      render 
    end 
  end
end

*Feuern und vergessen*

Ein Merb-eigenes Feature, das keine Entsprechung in Rails hat, bietet die Methode "render_then_call", mit der man einen Code-Block ausführen lassen kann, nachdem die Response bereits zum Client geschickt wurde. Dies eignet sich allerdings nur für kurz laufende Prozesse, länger laufende Vorgänge stößt man, ähnlich wie in Rails, besser über eine Queue an (wie z.B. ActiveMQ oder Starling)


[Beispiel 7: render_then_call]
class Stars < Application
  def show
    render_then_call(display @star) do
  		Stats.tick(@star)
  	end
  end
end

*Von URLs zu Actions*

Der Router regelt die Zuordnung von URLs zu Controller-Klassen, Methoden und Parametern. Das Routing von Merb ist deutlich flexibler als jenes in Rails und dazu noch performanter umgesetzt. 

Die Syntax zur Erzeugung von Routen ist etwas anders als in Rails. Eine vollständige Beschreibung der Funktionalität des Routers würde wiederum den Rahmen dieses Artikels sprengen, daher nur kurz ein paar Beispiele (Beispiel 8). Die ersten beiden Beispiele mappen eine URL vom Schema "/foo/bar" auf die show-Action im Foo-Controller und weist den Teil "bar" der URL einem Request-Parameter "foo_id" zu.

Zusätzlich können in "match"-Methode auch andere Bestandteile eines Requests herangezogen werden, wie das dritte Beispiel (ohne Entsprechung in Rails) zeigt. Verwendbar sind alle Eigenschaften eines Request-Objekts, im Beispiel wird gegen den User-Agent verglichen.

Genau wie bei Rails ist es möglich, REST-Ressourcen zu definieren und sogar zu verschachteln. Auch hier ist die Syntax leicht anders (Beispiel 8)

[Beispiel 8: REST-Routen in Rails und Merb]
# Ressourcen in Rails
map.resources :stars do |star|
  star.resources :planets
end

# Ressourcen in Merb
resources :stars do
  resources :planets
end

*Erzeugung von URLs*

Anders als bei Rails werden durch den Merb-Router keine benannten Methoden erzeugt. Statt dessen gibt es zwei Methoden, die zur Erzeugung von URLs verwendet werden. "url" erzeugt URLs aus dem Namen einer Route, während resource() eine URL für REST-Ressourcen erzeugt. Das Beispiel 9 harmoniert mit den in Beispiel 7 und 8 generierten Routes.

[Beispiel 9: URL-Helper in Merb]
url(:foo, :foo_id => 'fooid') => '/foo/fooid'
resource(:stars) => '/stars'
resource(@star) => '/stars/12'
resource(@star, :planets) => '/stars/planets'
resource(@star, @planet) => '/stars/planets'

*Views und Templates*

Im View-Layer unterscheidet sich Merb kaum von Rails. Standardmäßig werden ERb-, haml- und Builder-Templates unterstützt. Mit Hilfe einer Konfigration in config/init.rb kann man den Generatoren beibringen, z.B. Standardmäßig haml-Templates zu erzeugen (Beispiel 10)

[Beispiel 10: Konfiguration der Default-Template-Engine]
# config/init.rb
use_template_engine :haml

Unterschiede zu Rails finden sich auch im Detail in der Benennung von vier-helper-methoden, z.B. zum Erzeugen von Formularen und Formular-Feldern.

*Wiederverwendung mit Parts und Slices*

In früheren Rails-Versionen gab es die sog. Components, die, vor allem wegen der schlechten Performance, im Laufe der Zeit aus dem Rails-Core geflogen sind. Etwas ganz ähnliches gibt es, als Plugin für Merb, in Form der sog. Parts. Parts sind im Wesentlichen eigene Controller, die eigene View-Templates haben und dann als "Widgets" in andere Views eingebaut werden können. 

Noch einen Schritt weiter in Richtung der Wiederverwendung von Komponenten gehen die sog. Slices. Slices sind komplette Merb-Applikationen, die sich als ruby-gem verpackt in eine Anwendung einbinden lassen. Ein Beispiel für eine solche Slice ist das merb-auth-slice-password gem, welches für das merb-auth-Plugin Anmelde- und Registrierungsformulare implementiert.

*Deployment*

Durch die Verwendung der Rack-Schnittstelle ist Merb sehr flexibel deploybar, unter anderem mit Mongrel, dem auch im Rails-Umfeld beliebten Ruby-App-Server, aber auch über FastSGI, mit Thin oder dem inzwischen sehr beliebten mod_passenger, einem Apache-Modul, welches die Anwendungsprozesse selbsständig managed.

Für den eigentlichen Deployment-Vorgang bietet sich das im Rails-Umfeld populäre Tool Capistrano an, für welches bereits Rezepte im Merb-Wiki zu finden sind.

*Literatur / Hilfe*

Zum Zeitpunkt da dieser Artikel verfasst wird, sind vier echte Bücher über Merb angekündigt, von denen zwei auch bereits im Rahmen von Early-Access-Programmen in elektronischer Form gelesen werden können. Zusätzlich schreibt Geoffrey Grossenbach von Peepcode.com noch an der finalen Version des EBooks "Meet Merb", welche spätestens bei Erscheinen dieses Artikels fertig sein sollte. Ebenfalls von Peepcode.com stammt ein einstündiger Screencast, der zum Erscheinen von Merb 1.0 aktualisiert wurde. Zuletzt erwähnenswert: Das offene Merb-Buch-Projekt von Matt Aimonetti, an dem man über Github auch selbst weiterschreiben kann.

Die Online-Dokumentation von Merb ist zur Zeit eher dürftig: Die von Rails bekannten RDoc-Dokumentationen sind vorhanden, aber an vielen Stellen noch etwas dürftig. Darüber hinaus gehende Informationen (Tutorials/Howtos) sind noch sehr dünn gesäht. Im Merb-Wiki gibt es durchaus schon gute Ansätze, die Konzepte von Merb zu erklären, so dass man davon ausgehen kann, das sich dieser Kritikpunkt relativieren wird.

*Community*

Merb hat eine sehr aktive und offene Entwickler-Gemeinschaft. Anders als Rails gibt es kein offiziell berufenes Core-Team. Die Entwicklung wird dezentral über GitHub organisiert und Entwickler, die gute Patches beisteuern, bekommen recht schnell Commit-Rechte.

*Fazit*

Merb schafft es, Rails ähnlich genug zu sein um Rails-Entwickler nicht zu verschrecken, bietet aber an vielen Stellen neue Ansätze und lohnt sich vor allem für Entwickler, die sich vom starren Rails-Korsett eingeengt fühlen. Denn neben einem Rails-Ersatz ist Merb vor allem ein sehr anpassungs- und wandlungsfähiges Framework, das von sehr klein (Eine Datei per Anwendung) nach sehr groß skaliert. Sicher bedingt durch das junge Alter des Frameworks hapert es noch an der einen oder anderen Stelle (Dokumentation!), so dass Merb gerade für Anfänger noch keine uneingeschränkte Empfehlung ist.

[Mitmachen


[Quellen, Literatur]

- merbivore.com (Die Merb-Homepage)
- http://peepcode.com/products/meet-merb-pdf-draft
- http://book.merbist.com/
- http://manning.com/ivey/ (Das "Merb in Action"-Buch)
- http://my.safaribooksonline.com/9780321601636 (Das "The Merb Way"-Buch)
- http://www.apress.com/book/view/9781430218234 (Das "Beginning Merb"-Buch)
- http://apress.com/book/view/9781430218654 (Das "Merb: What you need to know"-Buch)